GRANT ALL ON Groups TO C##ISE304;
SELECT * FROM USER_TABLES WHERE TABLE_NAME = 'GROUPS';

INSERT INTO C##ISE304.Groups (GroupName, CreatedDate) VALUES (:group_name, SYSDATE);


GRANT ALL ON Groups TO C##ISE304;

GRANT SELECT, INSERT, UPDATE, DELETE ON Groups TO C##ISE304;

SELECT * FROM C##ISE304.Groups;

GRANT SELECT, INSERT, UPDATE, DELETE ON C##OZGUVEN.Groups TO C##ISE304;

CREATE USER C##ISE304 IDENTIFIED BY financetracker;
GRANT CONNECT, RESOURCE TO C##ISE304;

SELECT * FROM ALL_TABLES WHERE TABLE_NAME = 'GROUPS' AND OWNER = 'C##OZGUVEN';
SELECT * FROM ALL_TABLES WHERE TABLE_NAME = 'GROUPS' AND OWNER = 'C##OZGUVEN';

GRANT SELECT, INSERT, UPDATE, DELETE ON C##OZGUVEN.Groups TO C##ISE304;

CREATE SYNONYM Groups FOR C##OZGUVEN.Groups;

ALTER TABLE Groups MODIFY GROUPID GENERATED BY DEFAULT AS IDENTITY;
ALTER TABLE Groups MODIFY GROUPID GENERATED ALWAYS AS IDENTITY;
CREATE SEQUENCE group_seq START WITH 1 INCREMENT BY 1;


CREATE SEQUENCE EXPENSES_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE;


CREATE OR REPLACE TRIGGER EXPENSES_TRIGGER
BEFORE INSERT ON Expenses
FOR EACH ROW
BEGIN
  IF :NEW.EXPENSEID IS NULL THEN
    SELECT EXPENSES_SEQ.NEXTVAL INTO :NEW.EXPENSEID FROM DUAL;
  END IF;
END;

DESCRIBE Expenses;

INSERT INTO Expenses (GroupID, UserID, Amount, Description, Date)
VALUES (:group_id, :user_id, :amount, :description, SYSDATE);


INSERT INTO Expenses (GroupID, UserID, Amount, Description, ExpenseDate)
VALUES (1, 8, 250.75, 'Lunch at the restaurant', SYSDATE);

ALTER TABLE Expenses ADD (Date DATE);


ALTER TABLE C##OZGUVEN.Expenses ADD (Date DATE);


ALTER TABLE Expenses ADD ("Date" DATE);


ALTER TABLE Expenses ADD (ExpenseDate DATE);

CREATE SEQUENCE NotificationSeq
START WITH 1
INCREMENT BY 1
NOCACHE;


CREATE OR REPLACE TRIGGER NotificationTrigger
BEFORE INSERT ON Notifications
FOR EACH ROW
BEGIN
  :NEW.NOTIFICATIONID := NotificationSeq.NEXTVAL;
END;



CREATE SEQUENCE DebtSeq
START WITH 1
INCREMENT BY 1
NOCACHE;


CREATE OR REPLACE TRIGGER Debts_BI
BEFORE INSERT ON Debts
FOR EACH ROW
BEGIN
    :NEW.DebtID := DebtSeq.NEXTVAL;
END;


DESCRIBE Users;

CREATE SEQUENCE USERS_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE;

CREATE OR REPLACE TRIGGER USERS_TRG
BEFORE INSERT ON USERS
FOR EACH ROW
BEGIN
  :NEW.USERID := USERS_SEQ.NEXTVAL;
END;
/


SELECT * FROM Users WHERE Email = 'john.doe@example.com';


DELETE FROM Users;
COMMIT;
DELETE FROM Groups;
COMMIT;

ALTER TABLE Groups MODIFY GroupName VARCHAR2(255);


CREATE SEQUENCE GROUPS_SEQ START WITH 1 INCREMENT BY 1;


CREATE OR REPLACE TRIGGER TRG_GROUPS_ID
BEFORE INSERT ON Groups
FOR EACH ROW
BEGIN
  :NEW.GroupID := GROUPS_SEQ.NEXTVAL;
END;
/


INSERT INTO Groups (GroupName, CreatedDate)
VALUES ('Test Group', SYSDATE);

SELECT * FROM Groups;


DESCRIBE Notifications;

INSERT INTO Users (UserID, Name, Email, Password)
VALUES (1, 'Test User', 'testuser@example.com', 'password123');
COMMIT;

SELECT * FROM Users WHERE UserID = 1;


INSERT INTO Users (UserID, Name, Email, Password)
VALUES ( 'Test User', 'testuser@example.com','123456', 'password123', 'USD');
COMMIT;


CREATE SEQUENCE NotificationSeq START WITH 1 INCREMENT BY 1;


INSERT INTO Notifications (NotificationID, UserID, Message, ReadStatus)
VALUES (NotificationSeq.NEXTVAL, :user_id, :message, 0);
